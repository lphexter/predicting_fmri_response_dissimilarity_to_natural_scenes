[project]
name = "project"
requires-python = ">=3.10,<3.11"
version = "1.0"
dependencies = [
    # Add runtime dependencies here
]
readme = "README.md"
keywords = ["neuroscience", "rdm", "clip", "cnn", "pytorch", "tensorflow"]

[project.optional-dependencies]
dev = [
    "tox",
    "ipykernel",
    "project[ds]",
    "project[lint]",
]
ds = [
    "numpy==1.26.4",
    "pandas==2.2.2",
    "torch==2.5.1",
    "torchvision",
    "torchaudio",
    "tensorflow",
    "tensorflow_probability",
    "tf-keras",
    "transformers",
    "scikit-learn",
    "scipy==1.13.1",
    "tqdm==4.67.1",
    "matplotlib==3.10.0",
    "seaborn==0.13.2",
    "Pillow"
]
lint = [
    "mypy",
    "ruff",
]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 120
src = ["src"]
extend-exclude = [
    "conf.py",
]
target-version = "py310"
lint.select = ["ALL"]
lint.ignore = [
    "COM812",  # Conflicts with the formatter
    "ISC001",  # Conflicts with the formatter
    "PT001",   # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "PT023",   # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "D415",    # Docstring can end without ./!
    "D416",    # Docstring Return can end without :
    "ANN001",  # Allow missing type annotations for function arguments.
    "ANN201",  # Allow missing type annotations for function return types.
    "E501",    # Ignore warnings for lines exceeding the character limit (too long lines).
    "D103",    # Do not enforce docstrings in public functions.
    "PTH118",  # Do not require using `Path` objects instead of `os.path` functions.
    "D104",    # Do not enforce docstrings in public packages (e.g., `__init__.py`).
    "D100",    # Do not enforce module-level docstrings.
    "ANN202",  # Allow missing type annotations for class methods (`self` and `cls` params).
    "ANN204",  # Allow missing type annotations for `__call__` methods.
    "D105",    # Do not enforce docstrings in magic (dunder) methods like `__str__`, `__repr__`.
    "N806",    # Allow variable names to be uppercase for ML conventions like X as input data (normally, Ruff enforces lowercase for variables).
    "D107",    # Do not enforce docstrings in `__init__` constructors.
    "D102",    # Do not enforce docstrings in public instance methods.
    "TID252",  # Allow relative imports (e.g., `from .module import foo`).
    "INP001",  # Allow implicit namespace packages (don't require `__init__.py` in packages).
    "TRY301",  # Allow using `raise Exception("msg")` instead of requiring `raise from` syntax.
    "TRY003",  # Do not enforce explicitly capturing exception instances in `except` clauses.
    "EM101",   # Allow using raw string literals for error messages instead of formatting.
    "EM102",   # Allow using raw string literals for exception messages (same as `EM101`).
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "S101", # Use of `assert` detected
    "D103", # Missing docstring in public function
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`(https://github.com/astral-sh/ruff/issues/5434)
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
disallow_untyped_defs = false
warn_unused_ignores = true
ignore_missing_imports = true
exclude = [
    "project-\\d+", # Ignore temporary folder created by setuptools when building an sdist
    "venv.*/",
    "build/",
    "dist/",
]

